subsystem = AOESW
component = aosq

description = "AOSQ Sequencer commands."
receive = [
  {
    
    
    name = configure

    description = """
    The configure command configures the AO Sequencer and the AO systems.

    This command does the following tasks in parallel:
      * Configure NFIRAOS for NFIRAOS NGSAO or LGS MCAO mode.
      * Configure LGSF for LGS observations (LGS MCAO mode only)
      * Configure the OIWFS and ODGW (if used)
      * Configure the RPG module.
    """
    args = [
      {

 	name = configNfiraos
 	description = "configuration for NFIRAOS "
 	type=string
      }
      {

	name = configLgsf
	description = "configuration for LGSF"
	type=string
      }
      {
	name = configOiwfs
	description = "configuration for OIWFS and ODGW"
	type=string
      }
      {
	name = configRpg
	description = "configuration for RPG"
	type=string
      }
    ]

  }
  {
    name = enableNfiraosNsen
    description = "Enable continuous exposure of NFIRAOS NSEN to acquire telescope pointing"
    args = [
      {
	name = mode
	description = "Operation mode of NSEN: Single or continuous exposure, or off."
	enum = [SINGLE, CONTINUOUS, OFF]
      }

    ]
    requiredArgs=[mode]
  }

  {
    name = enableLgsfBto
    description = "Enable laser propagation within LGSF BTO with BDM inserted. "
    args = [
      {
	name = mode
	description = "Operation mode: Using only look up table [LUT], with prealignment cameras [PAC], or off."
	enum = [ LUT, PAC, OFF]
      }
    ]
    requiredArgs=[mode]
  }
  {
    name = enableLgsfSky
    description = "Enable laser propagatin to sky."
    args = [
      {
	name = mode
	description = "Operation mode."
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }

  {
    name=enableNfiraosLgs
    description = "Acquire LGS on NFIRAOS LGS WFS"
  }

  {
    name=enableNfiraosPwfs
    description = "Acquire NGS on NFIRAOS PWFS"
    args = [
      {
	name=loopHi
	description = "Enable High order DM control using PWFS. Omit meaning OFF."
	enum=[ON,OFF]
      }
      {
	name=loopLgsTruth
	description = "Enable LGS Truth mode control using PWFS. Omit meaning OFF."
	enum=[ON,OFF]
      }
      {
	name=loopTt
	description = "Enable T/T control using PWFS. Omit meaning OFF."
	enum=[ON,OFF]
      }
    ]
  }

  {
    name=enableOiwfsTtf
    description = "Acquire TTF OIWFS"
    args = [
      {
	name = mode
	description = "Operation mode. On: close the loop. OFF: open the loop."
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }
  {
    name=enableOiwfsTt
    description = "Acquire TT OIWFS and ODGW"
    args = [
      {
	name = mode
	description = "Operation mode. On: close the loop. OFF: open the loop."
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }
  {
    name=enableOiwfsTruth
    description = "Acquire TTF or TT truth OIWFS or ODGW"
    args = [
      {
	name = mode
	description = "Operation mode. On: close the loop. OFF: open the loop."
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }

  {
    name=enableOffload
    description = "Enable all the background processing include offload to TCS"
    args = [
      {
	name = mode
	description = "Operation mode. On: close the loop. OFF: open the loop."
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }
  


  {
    name=specifyWfsModes
    description = "Specify how WFS operate during preset and dithering.  Can also be used when switching targets during an observation."
    args = [
      {
	name = modePwfs
	description = "PWFS related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }
      {
	name = modeOdgw1
	description = "Odgw1 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }
      {
	name = modeOdgw2
	description = "Odgw2 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }
      {
	name = modeOdgw3
	description = "Odgw3 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }
      {
	name = modeOdgw4
	description = "Odgw4 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }
      {
	name = modeOiwfs1
	description = "Oiwfs1 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }	
      {
	name = modeOiwfs2
	description = "Oiwfs2 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }	
      {
	name = modeOiwfs3
	description = "Oiwfs3 related loop mode"
	enum = [OFF, PARK, FREEZE, FOLLOW]
      }	
      
    ]
  }
  
  {
    name = stop
    description = "Stop all AO loops. Stop laser propagation."
  }
  {
    name = standby
    description = "Put AO system to standby. "
  }
  {
    name = park
    description = "End of night sequence."
  }
  {
    name = abort
    description = "Abort current action (TBD)."
  }
  {
    name = pause
    description = "Pause current action (TBD)."
  }
  {
    name = resume
    description = "Resume current action (TBD)."
  }
  {
    name = simulation
    description = "Enable high order simulation mode where the interface with ESW is simulated."
    args = [
      {
	name = mode
	description = "flag"
	enum = [ON, OFF]
      }
    ]
    requiredArgs=[mode]
  }
  {
    name = shutdown
    description = "Shutdown AOSQ"
  }
]

send = [
  {
    subsystem = AOESW
    component = rpg
    name = initialize
  }
  {
    subsystem = AOESW
    component = rpg
    name = shutdown
  }
  {
    subsystem = AOESW
    component = rpg
    name = configure
  }
  {
    subsystem = AOESW
    component = rpg
    name = abort
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulationMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateNcpa
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulatedTurbulence
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = followRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsSa
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsAcq
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareSlodar
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTtf
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTruth
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighReconstructor
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareController
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowPassFilter
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareVibrationIdentification
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDither
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmZernike
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmInterp
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmClip
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareTelescopeOffload
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareNcpa
  }

  {
    subsystem = AOESW
    component = psfr
    name = initialize
  }
  {
    subsystem = AOESW
    component = psfr
    name = configure
  }
  {
    subsystem = AOESW
    component = psfr
    name = quicklook
  }
  {
    subsystem = AOESW
    component = psfr
    name = store
  }
  {
    subsystem = AOESW
    component = psfr
    name = getParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = setParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = shutdown
  }
  {
    subsystem = AOESW
    component = psfr
    name = abort
  }
  {
    subsystem = AOESW
    component = psfr
    name = simulationMode
  }
  
  // NFIRAOS at
  {
    subsystem  = NFIRAOS
    component  = at
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_datum
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_stop
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_select
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = SOURCE_onOff
  }

  // NFIRAOS bs
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = select
  }

  // NFIRAOS dm
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = setCalibMode
  }
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = mirrorFlat
  }
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = shape
  }

  // NFIRAOS encl
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = cooldown
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = quiet
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = standby
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = setPortGateState
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = setInputWindowShutterState
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = park
  }

  // NFIRAOS ism
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = select
  }

  // NFIRAOS lgsTrombone
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = move
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = sodiumLayer
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = follow
  }

  // NFIRAOS lgsWfs
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = enableWfs
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setPixelStream
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setRtcTargets
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = startTriggeredExposures
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = readSingleFrame
  }


  // NFIRAOS ngsAdc
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = move
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = setAdc
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = setAdcDispersion
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = follow
  }

  // NFIRAOS ngsFieldStop
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = select
  }

  // NFIRAOS ngsFsm
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = position
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = follow
  }

  // NFIRAOS ngsSsm
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = setDither
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = move
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = positionPwfs
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = nudgePwfs
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = zeroPwfs
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = setNssTarget
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = resetIntegrator
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = follow
  }

  // NFIRAOS nsen
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_datum
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_stop
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_select_sensor
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_move_sensor
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_config_exposure
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_expose
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_abort
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = DL_config_exposure
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = DL_expose
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = DL_abort
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = HRWFS_config_exposure
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = HRWFS_expose
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = HRWFS_abort
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = CAL_select
  }

  // NFIRAOS power
  {
    subsystem  = NFIRAOS
    component  = power
    name       = setDevice
  }
  {
    subsystem  = NFIRAOS
    component  = power
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = power
    name       = datum
  }

  // NFIRAOS pwfs
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setBinning
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setPixelStream
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setRtcDestinations
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setRtcTargets
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = startTriggeredExposures
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = readSingleFrame
  }

  // NFIRAOS rtc
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = mode
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibLgsBackground
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModePixel
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeGrad
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeCmd
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeWc
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pipelineActivate
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pipelineDeactivate
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopOpen
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsFocus
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsTt
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = setLgsTtCntrl
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopTwfs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopHigh
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier0
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = acqTableSet
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier1
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier2
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier3
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopPwfsDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetLgs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetPwfs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetOiwfsOdgw
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadOiwfsPoa
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadPwfsSsm
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadTcs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pwfsTelDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = guideStarHandOff
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopParamReset
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = paramConfigSave
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = paramConfigSet
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = lgsfFsmZero
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = dmFlatten
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = ttsZero
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = rtsDelete
  }

  // NFIRAOS rtcRole
  {
    subsystem  = NFIRAOS
    component  = rtcRole
    name       = select
  }

  // NFIRAOS ssLgs
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = selectDeployment
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = setRangeDistance
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = runTrajectory
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = setSourceIntensity
  }

  // NFIRAOS ssNgs
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = deploy
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = source
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = fpmDither
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = fpmOffsetPinhole
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = fpmOffsetPitch
  }

  // NFIRAOS timing
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = enableTrigger
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = disableTrigger
  }

  // NFIRAOS tts
  {
    subsystem  = NFIRAOS
    component  = tts
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = tts
    name       = setCalibMode
  }
  {
    subsystem  = NFIRAOS
    component  = tts
    name       = move
  }
  {
    subsystem  = NFIRAOS
    component  = tts
    name       = position
  }
  //IRIS
  // OIWFS ADC
  {
    subsystem = IRIS
    component = oiwfs.adc
    name = datum
  }

  {
    subsystem = IRIS
    component = oiwfs.adc
    name = stop
  }

  {
    subsystem = IRIS
    component = oiwfs.adc
    name = park
  }

  {
    subsystem = IRIS
    component = oiwfs.adc
    name      = follow
  }

  {
    subsystem = IRIS
    component = oiwfs.adc
    name      = setAdc
  }

  {
    subsystem = IRIS
    component = oiwfs.adc
    name      = setAdcDispersion
  }
  
  // OIWFS detector

  {
    subsystem = IRIS
    component = oiwfs.detector
    name      = exposure
  }

  {
    subsystem = IRIS
    component = oiwfs.detector
    name      = cal_exposure
  }
  
  {
    subsystem = IRIS
    component = oiwfs.detector
    name      = cal_config
  }
  
  {
    subsystem = IRIS
    component = oiwfs.detector
    name      = init_acquisition_table
  }

  {
    subsystem = IRIS
    component = oiwfs.detector
    name      = table_jump
  }

  // OIWFS POA

  {
    subsystem = IRIS
    component = oiwfs.poa
    name = datum
  }

  {
    subsystem = IRIS
    component = oiwfs.poa
    name = stop
  }

  {
    subsystem = IRIS
    component = oiwfs.poa
    name = park
  }

  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = MODE_select
  }
  
  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_move
  }
  
  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_follow
  }
  
  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_offset
  }

  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_oiwfsActive
  }

  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_filter
  }
  
  {
    subsystem = IRIS
    component = oiwfs.poa
    name      = POS_trackingType
  }

  // IRIS rotator
  {
    subsystem = IRIS
    component = rotator
    name = phasing
  }
  {
    subsystem = IRIS
    component = rotator
    name = datum
  }

  {
    subsystem = IRIS
    component = rotator
    name = stop
  }

  {
    subsystem = IRIS
    component = rotator
    name = park
  }

  {
    subsystem = IRIS
    component = rotator
    name = move
  }

  {
    subsystem = IRIS
    component = rotator
    name = follow
  }

  // IRIS ODGW
  
  {
    subsystem = IRIS
    component = imager.odgw
    name = exposure
  }
  {
    subsystem = IRIS
    component = imager.odgw
    name = cal_config
  }
  {
    subsystem = IRIS
    component = imager.odgw
    name = init_acquisition_table
  }
  {
    subsystem = IRIS
    component = imager.odgw
    name = table_jump
  }
  {
    subsystem = IRIS
    component = imager.odgw
    name = offset
  }
  {
    subsystem = IRIS
    component = imager.odgw
    name = filter
  }
//MODHIS
  // OIWFS ADC
  {
    subsystem = MODHIS
    component = oiwfs.adc
    name = datum
  }

  {
    subsystem = MODHIS
    component = oiwfs.adc
    name = stop
  }

  {
    subsystem = MODHIS
    component = oiwfs.adc
    name = park
  }

  {
    subsystem = MODHIS
    component = oiwfs.adc
    name      = follow
  }

  {
    subsystem = MODHIS
    component = oiwfs.adc
    name      = setAdc
  }

  {
    subsystem = MODHIS
    component = oiwfs.adc
    name      = setAdcDispersion
  }
  
  // OIWFS detector

  {
    subsystem = MODHIS
    component = oiwfs.detector
    name      = exposure
  }

  {
    subsystem = MODHIS
    component = oiwfs.detector
    name      = cal_exposure
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.detector
    name      = cal_config
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.detector
    name      = init_acquisition_table
  }

  {
    subsystem = MODHIS
    component = oiwfs.detector
    name      = table_jump
  }

  // OIWFS POA

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name = datum
  }

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name = stop
  }

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name = park
  }

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = MODE_select
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_move
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_follow
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_offset
  }

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_oiwfsActive
  }

  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_filter
  }
  
  {
    subsystem = MODHIS
    component = oiwfs.poa
    name      = POS_trackingType
  }

  // MODHIS rotator
  {
    subsystem = MODHIS
    component = rotator
    name = phasing
  }
  {
    subsystem = MODHIS
    component = rotator
    name = datum
  }

  {
    subsystem = MODHIS
    component = rotator
    name = stop
  }

  {
    subsystem = MODHIS
    component = rotator
    name = park
  }

  {
    subsystem = MODHIS
    component = rotator
    name = move
  }

  {
    subsystem = MODHIS
    component = rotator
    name = follow
  }

  	//LGSF (use hocon.ipynb to auto generate)
  {
    subsystem = LGSF
    component=acq
    name=datum
  }

  {
    subsystem = LGSF
    component=acq
    name=acquire
  }

  {
    subsystem = LGSF
    component=env
    name=laserCooling
  }

  {
    subsystem = LGSF
    component=focusing
    name=datum
  }

  {
    subsystem = LGSF
    component=focusing
    name=move
  }

  {
    subsystem = LGSF
    component=focusing
    name=follow
  }

  {
    subsystem = LGSF
    component=las
    name=simulation
  }

  {
    subsystem = LGSF
    component=las
    name=asterism
  }

  {
    subsystem = LGSF
    component=las
    name=laserState
  }

  {
    subsystem = LGSF
    component=las
    name=abortLaserState
  }

  {
    subsystem = LGSF
    component=las
    name=detune
  }

  {
    subsystem = LGSF
    component=las
    name=repump
  }

  {
    subsystem = LGSF
    component=las
    name=coolingState
  }

  {
    subsystem = LGSF
    component=lp
    name=select
  }

  {
    subsystem = LGSF
    component=op
    name=datum
  }

  {
    subsystem = LGSF
    component=op
    name=stop
  }

  {
    subsystem = LGSF
    component=op
    name=follow
  }

  {
    subsystem = LGSF
    component=op
    name=exposure
  }

  {
    subsystem = LGSF
    component=op
    name=calibPac
  }

  {
    subsystem = LGSF
    component=op
    name=calibInteraction
  }

  {
    subsystem = LGSF
    component=op
    name=calibControl
  }

  {
    subsystem = LGSF
    component=power
    name=select
  }

  {
    subsystem = LGSF
    component=power
    name=power
  }

  {
    subsystem = LGSF
    component=shutter
    name=select
  }

  {
    subsystem = LGSF
    component=te
    name=lltCover
  }

  {
    subsystem = LGSF
    component=te
    name=datum
  }

  {
    subsystem = LGSF
    component=te
    name=stop
  }

  {
    subsystem = LGSF
    component=te
    name=move
  }

  {
    subsystem = LGSF
    component=te
    name=follow
  }

  {
    subsystem = LGSF
    component=te
    name=calibInteraction
  }

  {
    subsystem = LGSF
    component=te
    name=calibControl
  }

  {
    subsystem = LGSF
    component=te
    name=calibOnAxisAG
  }

  {
    subsystem = LGSF
    component=te
    name=calibOnAxisLLT
  }

  {
    subsystem = LGSF
    component=te
    name=calibOffAxisAGPointing
  }

  {
    subsystem = LGSF
    component=te
    name=calibOffAxisLLTCentering
  }

  {
    subsystem = LGSF
    component=te
    name=calibOffAxisDswfsCentering
  }

  {
    subsystem = LGSF
    component=te
    name=asterism
  }

  {
    subsystem = LGSF
    component=te
    name=exposure
  }
  {
    subsystem = LGSF
    component=pac
    name=exposure
  }
  {
    subsystem = LGSF
    component=pac
    name=calib
  }
]

