subsystem = AOESW
component = rpg

description = "RPG Assembly commands."

receive = [
  {
    name = initialize
    description = " Restores RPG software to the state immediately. "
  }
  {
    name = configure
    description = " Set the overall AO parameters for the RPG. "
    requiredArgs = [aoMode, telescopeConfig, wfsList, correctorList]
    args = [
      {
        name = aoMode
        description = "Current AO mode"
        enum:[LGS, NGS, SL]
      }
      {
	name = telescopeConfig
	description = "Telescope parameters (pupil)"
	type = string
      }
      {
	name = wfsList
	description = "URI of participating WFSs"
	type = array
	minItems = 1
	items = {
	  name: wfsConfig
	  type: string
	  description :"WFS information URI for configuration service"
	}
      }
      {
	name = correctorList
	description = "URI participating correctors (DM, TTS)"
	type = array
	minItems = 1
	items = {
	  name: dmConfig
	  type : string
	  description: "DM information URI for configuration service"
	}
      }
      {
	name = highController
	description = "Type of high order controller"
	enum: [MVR, LSR]
      }
      {
	name = lowController
	description = "Type of low order controller"
	enum : [typeI, LQG]
      }
      {
        name = highOrderLoopRate
        description = "High-order loop rate. 0.1 to 800 Hz"
        type = float
        minimum = 0.1
        maximum = 800
        units = Hz
      }
      {
	name = highOrderTruthRate
	description = "High-order loop truth WFS rate"
	type=float
	minimum=0.1
	maximum=800
	units=Hz
      }
      {
        name = lowOrderLoopRate
        description = "Low-order loop rate. 0.1 to 800 Hz."
        type = float
        minimum = 0.1
        maximum = 800
        units = Hz
      }
      {
        name = lowOrderTruthRate
        description = "Low-order truth loop rate. 0.1 to 800 Hz"
        type = float
        minimum = 0.1
        maximum = 800
        units = Hz
      }
  
      {
        name = correctorRate
        description = "Wavefront corrector loop rate. 0.1 to 800 Hz."
        type = float
        minimum = 0.1
        maximum = 800
        units = Hz
      }
      {
	name = highWfs
	description = "High order WFS"
	enum: [LGS, PWFS]
      }
      {
	name = truthWFS
	description = "High order truth WFS"
	enum: [PWFS, NONE]
      }
      {
        name = ttfWfs
        description = "TTF Wfs"
        enum = [PWFS, OIWFSA, OIWFSB, OIWFSC]
      }
      {
        name = ttWfs
        description = "TT WfFS (3)"
        type = array
	minItems:1
	maxItems:3
        items = {
          enum = [PWFS, OIWFSA, OIWFSB, OIWFSC, ODGW1, ODGW2, ODGW3, ODGW4]
        }
      }
      {
        name = ttTruthWfs
        description = "TT Truth WFSs (4)"
        type = array
	minItems:0
	maxItems:4
        items = {
          enum = [OIWFSA, OIWFSB, OIWFSC, ODGW1, ODGW2, ODGW3, ODGW4]
        }
      }
      {
        name = ttfTruthWfs
        description = "TTF Truth WFS"
        enum = [OIWFSA, OIWFSB, OIWFSC]
      }
    ]
  }
  {
    name = shutdown
    description =  "stops all software in preparation for powering off of the servers."
  }
  {
    name = abort
    description = "Abort current action"
  }
  {
    name = simulationMode
    description = "Enables simulation mode"
    args=[
      {
	name = highOrder
	description = "Enable high order simulation mode where the interface with AOSQ is simulated"
	enum = [On, Off]
      }
      {
	name=lowOrder
	description = "Enable low order simulation mode where RTC input streams are simulated"
	enum = [On, Off]
      }
    ]
  }
  {
    name = calibrateInteractionMatrix
    description = "Calibrate interaction matrix"
    requiredArgs=[dm]
    args=[
      {
	name = dm
	description = "Select DM"
	type = array
	dimensions : [2]
	items ={
	  enum = [Zonal, Model, Off]
	}
      }
      {
	name = lgsWfs
	description = "Select LGS WFS"
	type = array
	dimensions: [6]
	items = {
	  enum = [On, Off]
	}
      }
      {
	name = pWfs
	description = "Select PWFS"
	enum = [On, Off]
      }
      {
	name=configName
	description = "URI to store the results"
	type = string
      }
      {
	name = init
	description = "(Re)initial the data for this process"
	type = boolean
      }
    ]
  }
  {
    name = calibrateNcpa
    description = "Calibrate NCPA using phase diversity"
    requiredArgs=[dm, lgsWfs]
    args = [
      {
	name = dm
	description = "Select DM"
	type = array
	dimensions:[2]
	items={
	  enum = [On, Off]
	}
      }
      {
	name = lgsWfs
	description = "Select LGS WFS"
	type = array
	dimensions: [6]
	items = {
	  enum = [On, Off]
	}
      }
      {
	name = focus
	description = "Focus offset for WFS gradient"
	type = float
	units = nm
      }
      {
	name = gain
	description = "Gain for updating reference vector"
	type = float
      }
      {
	name = exposureFile
	description = "Current science exposure file"
	type = string
      }
      {
	name = instrumentConfig
	description = "The current instrument configuration"
	type = string
      }
      {
	name = init
	description = "(Re)initial the data for this process"
	type = boolean
      }
      {
	name = finish
	description = "Finish the process"
	type = boolean
      }
      {
	name = configName
	description = "Location to save the results"
	type = string
      }
    ]
  }
  {
    name = simulatedTurbulence
    description  = "Compute simulated turbulence for the RTC"
    requiredArgs = [r0]
    args = [
      {
	name = enabled
	description = "whether this DM is used"
	type = array
	dimensions = [2]
	items = {enum:[true, false]}
      }
      {
	name = r0
	description = "Fried parameter for this DM"
	type = array
	items = {type: float, units: meter}
      }
      
      {
	name = windSpeed
	description = "wind Speed for this DM"
	type = array
	items = {type: float, units: meter}
      }
      {
	name = windDirection
	description = "wind Direction for this DM"
	type = array
	items = {type: float, units: meter}
      }
      {
	name = outerScale
	description = "Outer scale"
	type = array
	items = {type: float, units: meter}
      }
    ]
  }
  {
    name = prepareRTC
    description = "Start preparing parameters for RTC"
  }
  {
    name = followRTC
    description = "Automatically receieve RTC telemetry, compute and send updated parameters"
  }
  {
    name = prepareWfsSa
    description = "Prepare WFS subaperture area, rotation and Mask"
  }
  {
    name = prepareWfsAcq
    description = "Prepare WFS IR acquisition table"
  }
  {
    name = prepareSlodar
    description = "Prepare Slodar parameters"
  }
  {
    name = prepareWfsTtf
    description = "Prepare gradient to T/T/F mode and reconstruction"
  }
  {
    name = prepareWfsTruth
    description = "Prepare LGS gradient truth modes and reconstructor"
  }
  {
    name = prepareHighInteractionMatrix
    description = "Prepare high order interaction matrix"
  }
  {
    name = prepareHighReconstructor
    description = "Prepare high order control matrix"
  }
  {
    name = prepareLowMode
    description = "Prepare low order modes, reconstructor and projection matrix"
  }
  {
    name = prepareController
    description = "Prepare various controllers (temporal filters)"
  }
  {
    name = prepareLowPassFilter
    description = "Prepare various low pass filters"
  }
 
  {
    name = prepareVibrationIdentification
    description = "Vibration identification from RTC telemetry"
  }
  {
    name = prepareDither
    description = "Prepare dithering amplitude for FSM and PWFS"
  }
  {
    name = prepareDmZernike
    description = "Prepare zeniker mode reconstructor from gradients and projection from DM commands"
  }
  {
    name = prepareDmInterp
    description = "Prpeare DM interpolation/extrapolation matrix"
  }
  {
    name = prepareDmClip
    description = "Prepare DM storke and inter-actuator stroke clipping parameters"
  }
  {
    name = prepareTelescopeOffload
    description = "Prepare projection of DM command onto telescope shape and scallopping mode reconstructor"
  }
 
 {
    name = prepareNcpa
    description = "Prepare NCPA reference vector DM system flat."
  } 
  
]
